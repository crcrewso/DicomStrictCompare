<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DSCcore</name>
    </assembly>
    <members>
        <member name="T:DicomStrictCompare.DscDataHandler">
            <summary>
            Holds the user entered data and builds the file list for the file handler
            </summary>
        </member>
        <member name="P:DicomStrictCompare.DscDataHandler.SourceDosesList">
            <summary>
            List of RD (Dose) files in the source directory
            </summary>
        </member>
        <member name="P:DicomStrictCompare.DscDataHandler.SourcePlanList">
            <summary>
            List of RP (Plan) files in the source directory
            </summary>
        </member>
        <member name="P:DicomStrictCompare.DscDataHandler.TargetDosesList">
            <summary>
            List of RD (Dose) files in the target directory
            </summary>
        </member>
        <member name="P:DicomStrictCompare.DscDataHandler.TargetPlanList">
            <summary>
            List of RP (Plan) Files in the target directory
            </summary>
        </member>
        <member name="P:DicomStrictCompare.DscDataHandler.DosePairsList">
            <summary>
            List of matched source and plan dose files, at the time of this comment matching was made by plan name, field name and patient ID. 
            </summary>
        </member>
        <member name="P:DicomStrictCompare.DscDataHandler.ResultMessage">
            <summary>
            Increasingly inaccurate name for the csv separated results from the analysis, 
            includes error messages for matches that didn't work. 
            </summary>
        </member>
        <member name="T:DicomStrictCompare.MatchedDosePair">
            <summary>
            Will contain the evaluation of any stored pair of DoseFiles
            </summary>
        </member>
        <member name="P:DicomStrictCompare.MatchedDosePair.IsEvaluated">
            <summary>
            The matched pair has been evaluated to measure results
            </summary>
        </member>
        <member name="P:DicomStrictCompare.MatchedDosePair.Name">
            <summary>
            Name of the pair evaluated
            </summary>
        </member>
        <member name="P:DicomStrictCompare.MatchedDosePair.FileNames">
            <summary>
            Filenames of the pair of files
            </summary>
        </member>
        <member name="M:DicomStrictCompare.MatchedDosePair.PercentCalculator(System.Int32,System.Int32)">
            <summary>
            Calculates the percent of voxels that failed based on the total 
            </summary>
            <param name="total">The total number of voxels compared</param>
            <param name="failed">The number of voxels that failed</param>
            <returns></returns>
        </member>
        <member name="M:DicomStrictCompare.MatchedDosePair.Evaluate(DicomStrictCompare.IMathematics)">
            <summary>
            Performs the actual work not the most efficient way but I'll work it out
            </summary>
        </member>
        <member name="T:DicomStrictCompare.Controller.Settings">
            <summary>
            Consolidated settings collection to undo feature creep spaghettification.  
            </summary>
        </member>
        <member name="P:DicomStrictCompare.Controller.Settings.Dtas">
            <summary>
            Simple dta algorithm for fractional DTA adjustment
            </summary>
        </member>
        <member name="T:DicomStrictCompare.FileHandler">
            <summary>
            Take the list of source and target dicom files
            clean list removing non-dose files
            compare files to find matches
            report target files with no known source match
            provide results back to view 
            
            
            </summary>
        </member>
        <member name="T:DicomStrictCompare.DoseFile">
            <summary>
            Parsses all of the MetaData from a dicom file, and if a dose file, allows access to the dose information through methods
            </summary>
        </member>
        <member name="P:DicomStrictCompare.DoseFile.FileName">
            <summary>
            full filename including address
            </summary>
        </member>
        <member name="P:DicomStrictCompare.DoseFile.IsDoseFile">
            <summary>
            bool, true when modality is RTDOSE
            </summary>
        </member>
        <member name="P:DicomStrictCompare.DoseFile.Name">
            <summary>
            Series Description
            </summary>
        </member>
        <member name="P:DicomStrictCompare.DoseFile.PatientId">
            <summary>
            Hospital Patient ID
            </summary>
        </member>
        <member name="P:DicomStrictCompare.DoseFile.PlanID">
            <summary>
            Plan Identifier
            </summary>
        </member>
        <member name="P:DicomStrictCompare.DoseFile.FieldName">
            <summary>
            Field Identifier
            </summary>
        </member>
        <member name="P:DicomStrictCompare.DoseFile.MatchIdentifier">
            <summary>
            Compound of other metaData to match against
            </summary>
        </member>
        <member name="P:DicomStrictCompare.DoseFile.BeamNumber">
            <summary>
            Beam number 
            </summary>
        </member>
        <member name="P:DicomStrictCompare.DoseFile.SopInstanceId">
            <summary>
            SOP Instance Identifier of the source plan ID. 
            </summary>
        </member>
        <member name="M:DicomStrictCompare.DoseFile.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:DicomStrictCompare.DoseFile.DoseValues">
            <summary>
            If the file is a Dicom Dose file then the list of doses is returned.
            This is implemented as a method as a mitigation against memory abuse. 
            </summary>
            <returns>List of Doses from the dicom file</returns>
            <exception cref="T:System.InvalidOperationException"> Thrown if the file is not a dose file</exception>
        </member>
        <member name="M:DicomStrictCompare.DoseFile.DoseMatrix">
            <summary>
            Returns the Dose Matrix object for advanced evaluation
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Cannot call for dose on a Dicom file that is not a dose file</exception>
        </member>
        <member name="P:DicomStrictCompare.PlanFile.FieldNumberToNameList">
            <summary>
            Contains the field name, field number and number of MU's 
            </summary>
        </member>
        <member name="P:DicomStrictCompare.PlanFile.PlanID">
            <summary>
            Plan Label is the Dicom Equivalent of the Plan ID in Eclipse
            </summary>
        </member>
        <member name="T:DicomStrictCompare.SaveFile">
            <summary>
            Produces the 
            </summary>
        </member>
        <member name="M:DicomStrictCompare.SaveFile.Save(System.String)">
            <summary>
            Adds the provided csv Message to the existing file. 
            </summary>
            <param name="csvMessage">Comma separated value message to be saved </param>
            <returns>true iff the save was successful</returns>
        </member>
        <member name="M:DicomStrictCompare.SaveFile.Save(System.Collections.Generic.List{EvilDICOM.RT.DoseValue},System.Collections.Generic.List{EvilDICOM.RT.DoseValue},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This will only save PDD's 
            </summary>
            <param name="sourcePDD"></param>
            <param name="targetPDD"></param>
            <param name="filename"></param>
            <param name="title"></param>
            <param name="note"></param>
        </member>
        <member name="T:DicomStrictCompare.Model.DoseMatrixOptimal">
            <summary>
            Stores the Matrix of doses from the 3D dose file, and associated settings, in a format optimal for this code base 
            </summary>
        </member>
        <member name="P:DicomStrictCompare.Model.DoseMatrixOptimal.Length">
            <summary>
            Number of dose values in the array
            </summary>
        </member>
        <member name="P:DicomStrictCompare.Model.DoseMatrixOptimal.Count">
            <summary>
            Number of dose values in the object
            </summary>
        </member>
        <member name="M:DicomStrictCompare.Model.DoseMatrixOptimal.#ctor(EvilDICOM.RT.RTDose)">
            <summary>
            Creates a new object from an EvilDICOM RTDose object 
            </summary>
            <param name="doseMatrix"></param>
        </member>
        <member name="M:DicomStrictCompare.Model.DoseMatrixOptimal.GetPointDose(System.Double,System.Double,System.Double)">
            <summary>
            Gets the dose at a geometric point within this object. if point is not an explicit voxel of this object the dose 
            is calculated using a trilinear interpolation algorithm 
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:DicomStrictCompare.Model.DoseMatrixOptimal.GetPointDose(EvilDICOM.Core.Helpers.Vector3)">
            <summary>
            Gets the dose within this object 
            </summary>
            <param name="pt">Point of interest within phantom</param>
            <exception cref="T:System.ArgumentNullException"> Cannot be called on a null point</exception>
            <returns>Dose</returns>
        </member>
        <member name="M:DicomStrictCompare.Model.DoseMatrixOptimal.LatticeXYZToIndex(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts X,Y,Z coordinates in a 3D pixel lattice to a 1D index
            </summary>
            <param name="x">the x coordinate of the pixel</param>
            <param name="y">the y coordinate of the pixel</param>
            <param name="z">the z coordinate of the pixel</param>
            <param name="dimX">the width of the lattice in the X direction</param>
            <param name="dimY">the height of the lattice in the Y direction</param>
            <returns>the index of the pixel in the 3D lattice</returns>
        </member>
        <member name="M:DicomStrictCompare.Model.DoseMatrixOptimal.CompareDimensions(DicomStrictCompare.Model.DoseMatrixOptimal@)">
            <summary>
            If true the phantoms and each of their voxels are identically geometrically defined
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:DicomStrictCompare.Model.Dta">
            <summary>
            Holds all information needed for a single comparison set
            </summary>
        </member>
        <member name="P:DicomStrictCompare.Model.Dta.UseMM">
            <summary>
            Setting to keep track of unit of distance for dta 
            if true unit of distance is in mm
            if false unit of distance in voxels
            </summary>
        </member>
        <member name="P:DicomStrictCompare.Model.Dta.Threshhold">
            <summary>
            Fraction of peak dose below which comparison is ignored
            </summary>
        </member>
        <member name="P:DicomStrictCompare.Model.Dta.Tolerance">
            <summary>
            fractional difference between doses of interest
            </summary>
        </member>
        <member name="P:DicomStrictCompare.Model.Dta.Distance">
            <summary>
            distance in arbitrary unit for matching 
            </summary>
        </member>
        <member name="P:DicomStrictCompare.Model.Dta.Type">
            <summary>
            If relative is true calculation is based off of max Source dose
            if not calculation is based off of source voxel dose. 
            </summary>
        </member>
        <member name="P:DicomStrictCompare.Model.Dta.Algorithm">
            <summary>
            Algorithm of use, DTA being simple, Gamma being weighted complex and expensive but more commonly used
            </summary>
        </member>
        <member name="P:DicomStrictCompare.Model.Dta.TrimWidth">
            <summary>
            skin depth removed from source phantom before matching
            </summary>
        </member>
        <member name="P:DicomStrictCompare.Model.Dta.Relative">
            <summary>
            Backwards compatable placeholder for logic
            </summary>
        </member>
        <member name="T:DicomStrictCompare.Model.Dta.CalcType">
            <summary>
            lists the possible scope limit techniques for voxel to voxel comparison. 
            </summary>
        </member>
        <member name="F:DicomStrictCompare.Model.Dta.CalcType.relative">
            <summary>
            perccent difference is taken to mean that pass or fail is based on the difference between source and target based on the fraction of source dmax 
            </summary>
        </member>
        <member name="F:DicomStrictCompare.Model.Dta.CalcType.absolute">
            <summary>
            percent difference conditions are based solely on the source and target doses at the point of inspection
            </summary>
        </member>
        <member name="T:DicomStrictCompare.Model.Dta.CalcAlgorithm">
            <summary>
            list of supported comparison algorithms 
            </summary>
        </member>
        <member name="F:DicomStrictCompare.Model.Dta.CalcAlgorithm.dta">
            <summary>
            first the relative dose difference at the point in question is analyzed, if failed then 
            if its possible for the target to match the source within the distance window provided
            </summary>
        </member>
        <member name="F:DicomStrictCompare.Model.Dta.CalcAlgorithm.gamma">
            <summary>
            impliments gamma evaluation function
            </summary>
        </member>
        <member name="P:DicomStrictCompare.Model.Dta.Summary">
            <summary>
            Results summary
            </summary>
        </member>
        <member name="M:DicomStrictCompare.Model.Dta.#ctor(System.Boolean,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="useMM">if true trim is mm defined, if false trim is voxel defined</param>
            <param name="threshhold">minimum percent of Dmax for the dose to be calculated</param>
            <param name="tolerance">fractional diference from source that will return a pass</param>
            <param name="distance">distance for dta algorithm</param>
            <param name="relative">dose comparison tolerance condition</param>
            <param name="gamma">dose comparison algorithm</param>
            <param name="trim">depth of voxels to remove from surface of phantoms</param>
        </member>
        <member name="M:DicomStrictCompare.Model.Dta.#ctor(System.String)">
            <summary>
            String constructor
            </summary>
            <param name="fromDtaToString"></param>
        </member>
        <member name="M:DicomStrictCompare.Model.Dta.ShortToString">
            <summary>
            Shorter Summary 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DicomStrictCompare.Model.Dta.ToString">
            <summary>
            Impliments standard tostring with comma. old way of reporting results
            </summary>
            <returns></returns>
        </member>
        <member name="M:DicomStrictCompare.Model.Dta.Titles">
            <summary>
            Returns the header for the ToString() function
            </summary>
            <returns>String</returns> 
        </member>
        <member name="M:DicomStrictCompare.Model.Dta.Equals(DicomStrictCompare.Model.Dta)">
            <summary>
            Tests equivalency 
            </summary>
            <param name="dta"></param>
            <returns></returns>
        </member>
        <member name="M:DicomStrictCompare.Model.SingleComparison.PercentCalculator(System.Int32,System.Int32)">
            <summary>
            Calculates the percent of voxels that failed based on the total 
            </summary>
            <param name="total">The total number of voxels compared</param>
            <param name="failed">The number of voxels that failed</param>
            <returns></returns>
        </member>
        <member name="M:DicomStrictCompare.Model.SingleComparison.#ctor(DicomStrictCompare.Model.Dta,System.Int32,System.Int32,System.Int32)">
            <summary>
            Comparison result object
            </summary>
            <param name="dta">DTA parameters used as part of the </param>
            <param name="totalCount">Total number of indicies able to be compared</param>
            <param name="totalCompared">Total number of comparisons made where the values of the source were above minimum restrictions</param>
            <param name="totalFailed">total number of comparisons that failed dta</param>
            <exception cref="T:System.ArgumentException">Impossible number of failures or comparisons were made</exception>
        </member>
        <member name="M:DicomStrictCompare.Model.SingleComparison.Equals(DicomStrictCompare.Model.SingleComparison)">
            <summary>
            Comparator for class.
            </summary>
            <param name="singleComparison"></param>
            <returns>true iff all elements of the comparisons match. </returns>
        </member>
        <member name="T:DicomStrictCompare.Model.X86Mathematics">
            <summary>
            Impliments dose comparison functions for x86_64 CPUs only. 
            </summary>
        </member>
        <member name="M:DicomStrictCompare.Model.X86Mathematics.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DicomStrictCompare.Model.X86Mathematics.CompareParallel(DicomStrictCompare.Model.DoseMatrixOptimal,DicomStrictCompare.Model.DoseMatrixOptimal,DicomStrictCompare.Model.Dta,System.Int32)">
            <summary>
            Safety checked to make sure that total threads created for comparison, set by cpuParallel, does not exceed total machine cores
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="dta"></param>
            <param name="cpuParallel"></param>
            <returns></returns>
        </member>
        <member name="T:DicomStrictCompare.IMathematics">
            <summary>
            Functions to compare dose arrays 
            Implimented as an interface to allow for GPGPU or non C# implimentations in the future 
            </summary>
        </member>
        <member name="M:DicomStrictCompare.IMathematics.CompareAbsolute(DicomStrictCompare.Model.DoseMatrixOptimal@,DicomStrictCompare.Model.DoseMatrixOptimal@,DicomStrictCompare.Model.Dta)">
            <summary>
            Compares target to source based on the DTA settings provided, using local percent arithmetic
            Single threaded 
            </summary>
            <param name="source">Reference dose array</param>
            <param name="target">Dose Array being verified</param>
            <param name="dta">distance to agreement parameters</param>
            <returns> The total failed voxels and total number of voxels compared</returns>
        </member>
        <member name="M:DicomStrictCompare.IMathematics.CompareRelative(DicomStrictCompare.Model.DoseMatrixOptimal@,DicomStrictCompare.Model.DoseMatrixOptimal@,DicomStrictCompare.Model.Dta)">
            <summary>
            Compares target to source based on the DTA settings provided, comparisons relative to source dmax Single threaded
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="dta"></param>
            <returns></returns>
        </member>
        <member name="M:DicomStrictCompare.IMathematics.CompareParallel(DicomStrictCompare.Model.DoseMatrixOptimal,DicomStrictCompare.Model.DoseMatrixOptimal,DicomStrictCompare.Model.Dta,System.Int32)">
            <summary>
            Compares target to source, based on the DTA settings provided, using the number of cores up to max 
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="dta"></param>
            <param name="cpuParallel">Up to this many parallel comparison threads will be generated. </param>
            <returns></returns>
        </member>
        <member name="M:DicomStrictCompare.ProfileTools.Distance(EvilDICOM.RT.DoseValue,EvilDICOM.RT.DoseValue)">
            <summary>
            Outputs the distance between two points. Uses the Pythagorean theorum to do it. 
            </summary>
            <param name="dose1">The dose1.</param>
            <param name="dose2">The dose2.</param>
            <returns></returns>
        </member>
        <member name="M:DicomStrictCompare.ProfileTools.Comparison(System.Collections.Generic.List{EvilDICOM.RT.DoseValue},System.Collections.Generic.List{EvilDICOM.RT.DoseValue},System.Int32,System.Double)">
            <summary>
            Returns the 1 dimensional percent agreement as the number of voxels that pass x % and x mm
            defaults to 2%/2mm
            expand this
            </summary>
            <param name="profile">the profile being compared</param>
            <param name="reference">the reference being compared against</param>
            <param name="dta">match distance, mm </param>
            <param name="percent">tolerance % of max dose of ref </param>
            <returns></returns>
        </member>
        <member name="M:DicomStrictCompare.ProfileTools.ComparisonRaw(System.Collections.Generic.List{EvilDICOM.RT.DoseValue},System.Collections.Generic.List{EvilDICOM.RT.DoseValue},System.Int32,System.Double)">
            <summary>
            Comparing the raw data, controls normalization
            </summary>
            <param name="reference">The reference.</param>
            <param name="profile">The profile.</param>
            <param name="dta">The dta.</param>
            <param name="percent">The percent.</param>
            <returns></returns>
        </member>
        <member name="M:DicomStrictCompare.ProfileTools.DepthToPercentOfPeak(System.Collections.Generic.List{EvilDICOM.RT.DoseValue},System.Int32)">
             <summary>
             Calculates the depth from surface that a PDD will drop below the percent provided. percent=50 would yield the depth at which the profile falls to below 0.5*Peak 
             </summary>
             <param name="doseValues">PDD Profile data</param>
             <param name="percent">Integer representing percent of depth of interest </param>
             <returns>The index of the furthest voxel from the surface that has a dose value above the percent of interest</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the profile does not drop below the sought percent</exception>
        </member>
        <member name="M:DSC.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="M:DSC.Form1.#ctor">
            <inheritdoc />
        </member>
        <member name="M:DSC.Form1.TbxTightTol_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Allows user to enter a tolerance value and converts it to a class parameter 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DSC.Form1.BtnExecute_Click(System.Object,System.EventArgs)">
            <summary>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:DSC.Form1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DSC.Form1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DSC.Form1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DSCcore.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DSCcore.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DSCcore.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DSCcore.Properties.Resources.compMessageMalformedResult">
            <summary>
              Looks up a localized string similar to Comparison algorithm failed spectacularily .
            </summary>
        </member>
        <member name="P:DSCcore.Properties.Resources.finished">
            <summary>
              Looks up a localized string similar to Finished.
            </summary>
        </member>
        <member name="P:DSCcore.Properties.Resources.minDTAdistance">
            <summary>
              Looks up a localized string similar to 0.
            </summary>
        </member>
        <member name="P:DSCcore.Properties.Resources.minDTApercent">
            <summary>
              Looks up a localized string similar to 0.
            </summary>
        </member>
        <member name="P:DSCcore.Properties.Resources.minDTAtrim">
            <summary>
              Looks up a localized string similar to 0.
            </summary>
        </member>
        <member name="P:DSCcore.Properties.Resources.paramTestFailed">
            <summary>
              Looks up a localized string similar to Test failed please check for empty settings boxes.
            </summary>
        </member>
        <member name="P:DSCcore.Properties.Resources.zeroTasks">
            <summary>
              Looks up a localized string similar to You have not asked me to do anything, please check something.
            </summary>
        </member>
    </members>
</doc>
